from fastapi import FastAPI, Request, UploadFile, File, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from sqlalchemy.orm import Session
from ultralytics import YOLO
from PIL import Image
import io
import os
import shutil
import uuid

from database import SessionLocal, engine
from models import Base, Dress

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å —É –ë–î
Base.metadata.create_all(bind=engine)

app = FastAPI()

# –ü–∞–ø–∫–∞ –∑—ñ —Å—Ç–∞—Ç–∏—á–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
app.mount("/static", StaticFiles(directory="static"), name="static")

# –®–∞–±–ª–æ–Ω–∏ Jinja2
templates = Jinja2Templates(directory="templates")

# –ú–æ–¥–µ–ª—å YOLO
model = YOLO("models/best.pt")

# –ö–ª–∞—Å–∏
CLASS_NAMES = {
    0: "A-line",
    1: "Ballgown",
    2: "Mermaid",
    3: "Mini",
    4: "Sheath"
}

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω—å
UPLOAD_FOLDER = "static/uploads"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# –°–µ—Å—ñ—è –ë–î
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.get("/")
async def index(request: Request):
    return templates.TemplateResponse("index.html", {
        "request": request,
        "image_url": None
    })

# POST /predict ‚Äî —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
@app.post("/predict")
async def predict(
    request: Request,
    file: UploadFile = File(...),
    db: Session = Depends(get_db)
):
    try:
        allowed_types = ["image/jpeg", "image/png", "image/webp"]
        if file.content_type not in allowed_types:
            return templates.TemplateResponse("index.html", {
                "request": request,
                "error": "üö´ –ü—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å—Å—è –ª–∏—à–µ —Ñ–æ—Ä–º–∞—Ç–∏ JPG, PNG –∞–±–æ WEBP.",
                "image_url": None
            })

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        filename = f"{uuid.uuid4().hex}_{file.filename}"
        file_path = os.path.join(UPLOAD_FOLDER, filename)
        with open(file_path, "wb") as buffer:
            shutil.copyfileobj(file.file, buffer)

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        image = Image.open(file_path).convert("RGB")
        result = model(image)[0]
        probs = result.probs

        if probs:
            top_idx = int(probs.top1)
            confidence = float(probs.top1conf)

            if confidence < 0.5:
                return templates.TemplateResponse("index.html", {
                    "request": request,
                    "error": "üö´ –ù–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –≤–µ—Å—ñ–ª—å–Ω—É —Å—É–∫–Ω—é. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ–Ω—à–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
                    "image_url": f"/static/uploads/{filename}"
                })

            label = CLASS_NAMES.get(top_idx, "Unknown")
            suggested_dresses = db.query(Dress).filter(Dress.style == label).limit(3).all()

            return templates.TemplateResponse("index.html", {
                "request": request,
                "result": {
                    "label": label,
                    "confidence": round(confidence * 100, 2)
                },
                "image_url": f"/static/uploads/{filename}",
                "suggested": suggested_dresses
            })

        return templates.TemplateResponse("index.html", {
            "request": request,
            "error": "ü§ñ –ú–æ–¥–µ–ª—å –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π.",
            "image_url": f"/static/uploads/{filename}"
        })

    except Exception as e:
        return templates.TemplateResponse("index.html", {
            "request": request,
            "error": f"üö´ –ü–æ–º–∏–ª–∫–∞: {str(e)}",
            "image_url": None
        })

# –ö–∞—Ç–∞–ª–æ–≥
@app.get("/catalog")
async def show_catalog(request: Request, db: Session = Depends(get_db)):
    dresses = db.query(Dress).all()
    return templates.TemplateResponse("catalog.html", {
        "request": request,
        "dresses": dresses
    })
